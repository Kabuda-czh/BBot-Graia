name: Release

on:
  push:
    branches:
      - master
    paths:
      - pyproject.toml

  workflow_dispatch:

jobs:
  build:
    name: Build Binary
    outputs:
      version: ${{ steps.version.outputs.version }}
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - windows-latest

    runs-on: ${{ matrix.os }}
    steps:
      - name: Prepare environment
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9.x"

      - name: Install Dependencies
        run: |
          pip install --upgrade wheel pip
          pip install -r requirements.txt

      - name: Install Playwright Browsers
        env:
          PLAYWRIGHT_BROWSERS_PATH: "0"
        run: playwright install chromium

      - name: Install Pyinstaller
        run: pip install --upgrade pyinstaller

      - name: Build Pyinstaller Binary
        run: pyinstaller main.spec

      - name: Replease Playwright Path
        run: python release.py --replace-playwright-path

      - name: Build Nuitka Binary
        run: |
          pip uninstall -y pyinstaller
          pip install nuitka zstandard ordered-set
          python -m nuitka --onefile --standalone --show-progress --assume-yes-for-downloads --output-dir=nuitka --windows-icon-from-ico=tv.ico --user-package-configuration-file=nuitka.yml main.py

      - name: Get commit hash
        id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Get Release Version
        id: version
        run: |
          echo "::set-output name=version::v$(python release.py --version --beta ${{ steps.commit.outputs.short }})"

      - name: Rename Binary
        run: |
          mv ./dist/$(python release.py --buildname --package-tools pyinstaller) ./build/$(python release.py --name --package-tools pyinstaller --beta ${{ steps.commit.outputs.short }})
          mv ./nuitka/$(python release.py --buildname --package-tools nuitka) ./build/$(python release.py --name --package-tools nuitka --beta ${{ steps.commit.outputs.short }})

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          files: build/*

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Prepare environment
        uses: actions/checkout@v2
      
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} 

      - name: Build Image
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: 
            ${{ secrets.DOCKER_USERNAME }}/bbot:latest